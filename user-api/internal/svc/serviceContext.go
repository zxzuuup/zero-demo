package svcimport (	"context"	"github.com/zeromicro/go-zero/rest"	"github.com/zeromicro/go-zero/zrpc"	"google.golang.org/grpc"	"google.golang.org/grpc/metadata"	"zero-demo/user-api/internal/config"	"zero-demo/user-api/internal/middleware"	"zero-demo/user-rpc/usercenter"	"zero-demo/user-api/internal/model"	"github.com/zeromicro/go-zero/core/stores/sqlx")type ServiceContext struct {	Config    config.Config	TestMiddleware rest.Middleware	UserModel model.UserModel	UserDataModel model.UserDataModel	UserRpcClient usercenter.UserCenter}func NewServiceContext(c config.Config) *ServiceContext {	return &ServiceContext{		Config:    c,		TestMiddleware:	middleware.NewTestMiddleware().Handle,		UserModel: model.NewUserModel(sqlx.NewMysql(c.DB.DataSource),c.Cache),		UserDataModel: model.NewUserDataModel(sqlx.NewMysql(c.DB.DataSource),c.Cache),		UserRpcClient: usercenter.NewUserCenter(zrpc.MustNewClient(c.UserConf,zrpc.WithUnaryClientInterceptor(TestClientInterceptor))),	}}func TestClientInterceptor(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {	md:=metadata.New(map[string]string{"username":"zhangsan"})	ctx=metadata.NewOutgoingContext(ctx,md)	err:=invoker(ctx,method,req,reply,cc,opts...)	if err!=nil{		return err	}	return nil}